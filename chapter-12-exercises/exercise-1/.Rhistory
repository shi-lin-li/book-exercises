birthdays_2019 <- lapply(birthdays, change_format)
date_test <- as.Date(03/07/2019)
today - date_test
date_test <- as.Date("03/07/2019", "%m/%d/%Y")
today - date_test
date_has_passed <- function(date) {
today - date < 0
}
date_has_passed(date_test)
today - date > 0
date_has_passed <- function(date) {
today - date > 0
}
date_has_passed(date_test)
date_test <- as.Date("01/07/2019", "%m/%d/%Y")
date_has_passed(date_test)
print(birthdays_2019)
date_has_passed <- function(date) {
Sys.Date() - date > 0
}
due_date <- as.Date("2019/01/23", "%Y/%m/%d")
date_has_passed(due_date)
format(Sys.Date(), %Y)
format(Sys.Date(), "%Y")
passed_this_year <-function(date) {
format(date, "%Y") - format(Sys.Date(), "%Y") - format(date, "%Y") < 0
}
passed_this_year(due_date)
passed_this_year <-function(date) {
as.Date(format(date, "%Y")) - as.Date(format(Sys.Date(), "%Y")) - format(date, "%Y") < 0
}
passed_this_year(due_date)
date_has_passed <- function(date) {
date - Sys.Date() < 0
}
#Saves assignment 2 due day in a variable
due_date <- as.Date("2019/01/23", "%Y/%m/%d")
date_has_passed(due_date)
print(date_has_passed(due_date))
as.numeric(format(due_date, "%Y"))
num = as.numeric(format(due_date, "%Y"))
has_past_year <- function(date) {
as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(Sys.Date(), "%Y")) < 0
}
has_past_year(due_date)
has_past_year(2018-12-18)
has_past_year(2020-12-18)
has_past_year <- function(date) {
as.numeric(format(date - as.numeric(format(Sys.Date(), "%Y")) < 0
}
has_past_year <- function(date) {
as.numeric(format(date - as.numeric(format(Sys.Date(), "%Y")) < 0
}
has_past_year <- function(date) {
as.numeric(format(date, "%Y")) - as.numeric(format(Sys.Date(), "%Y")) < 0
}
has_past_year(2020-12-18)
test <- as.Date("2017/01/23", "%Y/%m/%d")
has_past_year(test)
has_past_year(due_date)
paste("kim", "'s birthday is in", sep = "", "2", "days.")
paste("kim", "'s birthday is in", sep = "", "2", " days." )
paste("kim", "'s birthday is in ", sep = "", "2", " days." )
make_birthday_announcement("Kim", due_date)
make_birthday_announcement <- function(name, date) {
days_left <- date - Sys.Date()
paste(name, "'s birthday is in ", sep = "", days_left, " days.")
}
make_birthday_announcement("Kim", due_date)
make_birthday_announcement <- function(name, date) {
if (date_has_passed(date) == FALSE) {
days_left <- date - Sys.Date()
paste(name, "'s birthday is in ", sep = "", days_left, " days.")
} else {
paste(name, "'s birthday is in ", sep = "", days_left + 365, " days.")
}
}
make_birthday_announcement(due_date)
make_birthday_announcement("Kim", due_date)
test <- as.Date("1/1/2019", "%m/%d/%Y")
make_birthday_announcement("Kim", test)
make_birthday_announcement("Kim", test)
make_birthday_announcement <- function(name, date) {
days_left <- date - Sys.Date()
if (date_has_passed(date) == FALSE) {
paste(name, "'s birthday is in ", sep = "", days_left, " days.")
} else {
paste(name, "'s birthday is in ", sep = "", days_left + 365, " days.")
}
}
make_birthday_announcement("Kim", test)
format(test, "%m/%d/%Y+1")
make_birthday_announcement("Kim", due_date)
#9.
mapply(make_birthday_announcement, birthday_2019)
#9.
mapply(make_birthday_announcement, birthdays_2019)
birthdays[[2]]
birthdays[[2]]
birthdays[[c(1:3)]]
birthdays[[str]]
birthdays[[2]][1]
birthdays[[3]]
birthdays[[1:3]]
c(birthdays[[1:3]])
print(birthdays_2019)
change_format <- function(birthdays) {
as.Data(format(birthdays, "%m/%d/2019"), "%m/%d/%Y")
}
birthdays_2019 <- lapply(birthdays, change_format)
print(birthdays_2019)
#Applies the function "change_format" to all items in a list. Takes in a list and a function,
#and return a list with same amount of items.
birthdays_2019 <- lapply(birthdays, change_format)
change_format <- function(birthdays) {
as.Date(format(birthdays, "%m/%d/2019"), "%m/%d/%Y")
}
#Applies the function "change_format" to all items in a list. Takes in a list and a function,
#and return a list with same amount of items.
birthdays_2019 <- lapply(birthdays, change_format)
print(birthdays_2019)
#9.
name(birthdays_2019)
#9.
names(birthdays_2019)
#9.
?names
mapply(make_birthday_announcement, name(birthdays_2019), birthdays_2019)
mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
#9.
#
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019)
print(bday_announcements)
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
data()
Use ‘data(package = .rock(all.available = TRUE))’
data(package = .rock(all.available = TRUE))
data(rock = .packages(all.available = TRUE))
data(package = .packages(rock = TRUE))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, 40000, 50000)
?runif
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salary_2017 + salaries$salary_adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$ got_raise <- salaries$salary_adjustments < 0
View(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, "salary_2018"]
# How many employees got a raise?
salaries[salaries$got_raise]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments < 0
# How many employees got a raise?
salaries[salaries$got_raise]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE ,]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE , ]
nrow(salaries[salaries$got_raise == TRUE , ])
# What was the dollar value of the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments) , "employyees"]
# What was the dollar value of the highest raise?
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments) , "employees"]
data()
# What was the largest decrease in salaries between the two years?
data(Nile)
# What was the largest decrease in salaries between the two years?
data("Nile")
is.data.frame("Nile")
as .data.frame("Nile")
as.data.frame("Nile")
df <- as.data.frame("Nile")
is.data.frame("Nile")
is.data.frame("df")
is.data.frame(df)
View(df)
print(most_improved)
most_improved <- life_expectancy[life_expectancy$change == max_change, ]
#1.
life_expectancy <-read.csv(file = "data/life_expectancy.csv", stringsAsFactors = FALSE)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
View(b_port)
View(avg_arr_delay)
filter(b_port, arr_delay == max(arr_delay))
b_port <- left_join(avg_arr_delay, airports, by = c("dest"="faa"))
filter(b_port, arr_delay == max(arr_delay))
View(b_port)
large <- select(filter(b_port, arr_delay == max(arr_delay)), "name")
print(large)
as.data.frame(b_port)
large <- select(filter(b_port, arr_delay == max(arr_delay)), "name")
print(large)
View(large)
View(b_port)
is.data.frame(b_port)
print(max(b_port$arr_delay))
nrow(b_port)
arrange(b_port, arr_delay)
arrange(avg_arr_delay, arr_delay)
arrange(b_port, dec(arr_delay))
arrange(b_port, desc(arr_delay))
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay)) %>%
select("name")
print(large_airport)
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay)) %>%
select(name)
print(large_airport)
View(flights)
filter(arr_delay == 11)
filter(flights, arr_delay == 11)
filter(flights, arr_delay == max(arr_delay))
filter(b_port, arr_delay == max(arr_delay), na.rm = TRUE)
filter(b_port, arr_delay == max(arr_delay, na.rm = TRUE))
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE))
select(name)
b_port <- left_join(avg_arr_delay, airports, by = c("dest"="faa"))
large_airport <- b_port %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
select(name)
print(large_airport)
smallest_airport <- b_port %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
b_line <- left_join(avg_arr_delay, airlines, by = c("dest"="faa"))
b_line <- left_join(flights, avg_arr_delay, by ="dest")
delay_airline <- left_join(b_line, airlines, by = "carrier")
smallest_airport <- delay_airline %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
View(delay_airline)
rm(flights)
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
avg_arr_delay_line <- flights %>%
group_by(carrier)%>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
delay_airline <- left_join(avg_arr_delay_line, airlines, by = "carrier")
View(delay_airline)
View(delay_airline)
smallest_airport <- delay_airline %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
smallest_airline <- delay_airline %>%
filter(arr_delay == min(arr_delay, na.rm = TRUE)) %>%
select(name)
print(smallest_airline)
View(dep_delay_by_month)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay))
View(arr_delay_by_dest)
arr_delay_by_dest <- flights %>%
group_by(dest) %>%
summarize(
arr_delay = mean(dep_delay, na.rm = TRUE)
)
View(arr_delay_by_dest)
high_delay_dest <- arr_delay_by_dest %>%
filter(arr_delay == max(arr_delay, na.rm = TRUE)) %>%
select(dest)
print(high_delay_dest)
View(flights)
mutate(flights, speed = distance/(hour+minute/60))
dest_name <- filter(flights, speed == max(speed, na.rm = TRUE)) %>%
select(dest)
print(dest_name)
dest_name <- filter(flights, speed == max(speed, na.rm = TRUE)) %>%
select(dest)
flight_2 <- mutate(flights, speed = distance/(hour+minute/60))
View(flights_2)
View(flight_2)
dest_name <- filter(flight_2, speed == max(speed, na.rm = TRUE)) %>%
select(dest)
print(dest_name)
library(tidyr)
library(dplyr)
library(ggplot2)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv(file = "data/avocado.csv", header = TRUE,
stringsAsFactors = FALSE)
View(avocados)
avocados <- read.csv(file = "data/avocado.csv", header = TRUE,
stringsAsFactors = FALSE)
library(ggplot2)
setwd("~/Desktop/INFO201/book-exercises/chapter-12-exercises/exercise-1")
avocados <- read.csv(file = "data/avocado.csv", header = TRUE,
stringsAsFactors = FALSE)
View(avocados)
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
mutate(avocados, Date = as.Date(avocados$Date, "%Y/%m/%d"))
View(avocados)
mutate(avocados, year = as.numeric(substr(year, 5, 7)))
colnames(avocados)[colnames(avocado) == "X4046"] <- "small_haas"
colnames(avocados)[colnames(avocado) == "X4225"] <- "large_haas"
colnames(avocados)[colnames(avocado) == "X4770"] <- "xlarge_haas"
mutate(avocados, year = as.numeric(substr(year, 5, 7)))
colnames(avocados)[colnames(avocados) == "X4046"] <- "small_haas"
colnames(avocados)[colnames(avocados) == "X4225"] <- "large_haas"
colnames(avocados)[colnames(avocados) == "X4770"] <- "xlarge_haas"
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocado, other_avos = Total.Volume - (small_haas+large_haas+xlarge_haas))
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocados, other_avos = Total.Volume - (small_haas+large_haas+xlarge_haas))
View(avocados)
by_size <- data.frame(
avocados,
c["small_haas", "large_haas", "xlarge_haas", "other_haas"]
)
by_size <- data.frame(
avocados %>%
c["small_haas", "large_haas", "xlarge_haas", "other_haas"]
)
by_size <- data.frame(
Date = avocados$Date,
small_haas = avocados$small_haas,
large_haas = avocados$large_haas,
xlarge_haas = avocados$xlarge_haas,
other_avos = avocados$other_avos
)
View(by_size)
size_gathered <- gather(
by_size,
key = size,
value = volume,
-Date
)
View(size_gathered)
avg_vol <- size_gathered %>%
group_by(size) %>%
summarise(mean(volume, na.rm = TRUE)
)
View(avg_vol)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
by_type <- data.frame(
Date = avocados$Date,
type = avocados$type,
Total.Volume = avocados$Total.Volume
)
View(by_type)
by_type_spread <- spread(
by_type,
key = Date,
value = Total.Volume
)
View(by_type_spread)
by_type_no_rep <- by_type %>%
grouo_by(type, Date) %>%
summarise(volume_sum = sum(Total.Volume))
by_type_no_rep <- by_type %>%
group_by(type, Date) %>%
summarise(volume_sum = sum(Total.Volume))
View(by_type_no_rep)
by_type_spread <- spread(
by_type_no_rep,
key = Date,
value = Total.Volume
)
by_type_spread <- spread(
by_type_no_rep,
key = Date,
value = volume_sum
)
View(by_type_spread)
by_type <- spread(
by_type_no_rep,
key = Date,
value = volume_sum
)
colnames(avocados)[4:6] <- c("good", "hh", "yeah")
colnames(avocados)[colnames(avocados) == "X4046"] <- "small_haas"
colnames(avocados)[colnames(avocados) == "X4225"] <- "large_haas"
colnames(avocados)[colnames(avocados) == "X4770"] <- "xlarge_haas"
by_type <- by_type %>%
group_by(type, Date) %>%
summarise(volume_sum = sum(Total.Volume))
by_type <- data.frame(
Date = avocados$Date,
type = avocados$type,
Total.Volume = avocados$Total.Volume
)
View(by_type)
View(by_type_wide)
by_type_wide <- spread(
by_type_no_rep,
key = Date,
value = volume_sum
)
View(by_type_wide)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
by_type_wide <- spread(
by_type,
key = Date,
value = volume_sum
)
by_size <- avocados %>%
select(Date, other_avos, small_haas, large_haas, xlarge_haas)
mutate(avocados, year = as.numeric(substr(year, 5, 7)))
colnames(avocados)[colnames(avocados) == "X4046"] <- "small_haas"
colnames(avocados)[colnames(avocados) == "X4225"] <- "large_haas"
colnames(avocados)[colnames(avocados) == "X4770"] <- "xlarge_haas"
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocados, other_avos = Total.Volume - (small_haas+large_haas+xlarge_haas))
rm(avocados)
View(avocados)
avocados <- read.csv(file = "data/avocado.csv", header = TRUE,
stringsAsFactors = FALSE)
View(avocados)
mutate(avocados, Date = as.Date(avocados$Date, "%Y/%m/%d"))
View(avocados)
mutate(avocados, year = as.numeric(substr(year, 5, 7)))
colnames(avocados)[colnames(avocados) == "X4046"] <- "small_haas"
colnames(avocados)[colnames(avocados) == "X4225"] <- "large_haas"
colnames(avocados)[colnames(avocados) == "X4770"] <- "xlarge_haas"
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocados, other_avos = Total.Volume - (small_haas+large_haas+xlarge_haas))
View(avocados)
by_size <- avocados %>%
select(Date, other_avos, small_haas, large_haas, xlarge_haas)
View(by_size)
size_gathered <- gather(
by_size,
key = size,
value = volume,
-Date
)
View(size_gathered)
avg_vol <- size_gathered %>%
group_by(size) %>%
summarise(mean_volume = mean(volume))
)
View(avg_vol)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
by_type <- avocados %>%
group_by(Date, type) %>%
summarise(volume = sum(Total.Volume))
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
View(by_type_wide)
by_type_wide <- by_type %>%
spread(key = type, value = volume)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
View(by_type_wide)
