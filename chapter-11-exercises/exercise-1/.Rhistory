# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
is.vector(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
count(unique(makes))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
is.vector(unique(makes))
?count
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
is.data.frame(vehicles[vehicles$year == "1997", ])
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicle, average = mean(vehicles$cty, vehicles$hwy))
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicle$average <- mean(vehicles$cty, vehicles$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicle$average <- mean(vehicles$cty + vehicles$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(vehicles$cty + vehicles$hwy)
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(c(vehicles$cty, vehicles$hwy))
?mean
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles$hwy)
install.packages("dplyr")
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- (vehicles$cty + vehicles$hwy) / 2
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- (vehicles$cty + vehicles$hwy) / 2
# Install and load the "dplyr" library
install.packages("dplyr")
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, -hwy)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(car_1997_2wd, hwy == min(hwy)), id)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
car_1997_2wd <- filter(vehicles, drive == "2-Wheel Drive", city > 20)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(car_1997, average = (hwy + cty)/2 )
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(car_1997, average = (hwy + cty)/2 )
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, -hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(car_1997, average = (hwy + cty)/2 )
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
car_1997 <- mutate(car_1997, average = (hwy + cty)/2 )
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(car_1997, average = (hwy + cty)/2 )
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_1997_2wd <- filter(vehicles, drive == "2-Wheel Drive", city > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_1997_2wd <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(car_1997_2wd, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(cars_1997_2wd, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(cars_1997_2wd, hwy == min(hwy)), id)
best_vehicle < function(y, m) {
filter(vehicles, year == y) %>%
filter(vehicles, make == m) %>%
filter(vehicles, hwy == max(vehicles$hwy)) %>%
select(vehicles, model)
}
best_vehicle <- function(y, m) {
filter(vehicles, year == y) %>%
filter(vehicles, make == m) %>%
filter(vehicles, hwy == max(vehicles$hwy)) %>%
select(vehicles, model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, Honda)
best_vehicle <- function(y, m) {
filter(year == y) %>%
filter(make == m) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, Honda)
best_vehicle <- function(y, m) {
filter(year == y) %>%
filter(make == m) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, Honda)
best_vehicle <- function(y, m) {
filter(vehicles, year == y) %>%
filter(make == m) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, Honda)
filter(vehicles, year == 1995)
filter(a_year, make == m)
filter(a_year, make == Honda)
a_year <- filter(vehicles, year == 1995)
filter(a_year, make == Honda)
Honda
# What was the most efficient Honda model of 1995?
best_vehicle(1995, "Honda")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
cars_20 <- cars_2wd[cars_2wd$cty > 20, ]
View(cars_20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20 <- cars_20[cars_20$hwy == min(hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min(hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min(hwy), ]
cars_20 <- cars_2wd[cars_2wd$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min(hwy), ]
y"
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min("hwy"), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(cars_1997_2wd, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min(cars_20$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[hwy == min(hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min(cars_20$hwy), id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
cars_20_low <- cars_20[cars_20$hwy == min(cars_20$hwy), ]
cars_20_low <- [,id]
cars_20_low[,id]
"id"
cars_20_low$id
model <- function(y, m) {
car_y = vehicles[vehicles$year == y,]
car_m = car_y[car_y$make == m]
car_low = car_m[hwy = min(hwy), id]
}
model <- function(y, m) {
car_y = vehicles[vehicles$year == y,]
car_m = car_y[car_y$make == m]
car_max = car_m[hwy = max(hwy), id]
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, "Honda")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplayr)
install.packages(dplayr)
install.packages("dplayr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
data(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gain = dep_delay + arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gain = dep_delay + arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(time_gain))
# Make a histogram of the amount of time gained using the `hist()` function
hist(time_gain)
"time_gai
# Make a histogram of the amount of time gained using the `hist()` function
hist("time_gain")
# Make a histogram of the amount of time gained using the `hist()` function
hist("time_gain")
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gain)
rm(flights)
View(flights)
flights <- flights
mutate(time_gain = dep_delay + arr_delay) %>%
arrange(dec(time_gain))
flights <- flights %>%
mutate(time_gain = dep_delay + arr_delay) %>%
arrange(dec(time_gain))
flights <- flights %>%
mutate(time_gain = dep_delay + arr_delay) %>%
arrange(desc(time_gain))
View(flights)
flights <- flights %>%
mutate(gain_in_air = dep_delay + arr_delay) %>%
arrange(desc(gain_in_a
View(flights)
flights <- flights %>%
mutate(gain_in_air = dep_delay + arr_delay) %>%
arrange(d
flights <- flights %>%
mutate(gain_in_air = dep_delay + arr_delay) %>%
arrange(desc(gain_in_air))
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_in_air = dep_delay + arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_in_air))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg = mean(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg <- mean(flights$gain_in_air na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg <- mean(flights$gain_in_air, na.rm = TRUE)
rm(flights)
flights <- flights %>%
mutate(gain_in_air = dep_delay + arr_delay) %>%
arrange(desc(gain_in_air))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
avg <- mean(flights$gain_in_air, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flights, c[orin, dest, gain_in_air])
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flights, c[origin, dest, gain_in_air])
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flights, origin, dest, gain_in_air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flights, origin, dest, gain_in_air) %>%
filter(dest == "SEA")
sea_flights <- flights %>%
select(origin, dest, gain_in_air
sea_flights <- flights %>%
select(origin, dest, gain_in_air) %>%
filter(dest == "SEA")
sea_flights <- flights %>%
select(origin, dest, gain_in_air) %>%
filter(dest == "SEA")
# On average, did flights to SeaTac gain or loose time?
mean(sae_flights$gain_in_air)
# On average, did flights to SeaTac gain or loose time?
mean(sea_flights$gain_in_air)
# On average, did flights to SeaTac gain or loose time?
mean(sea_flights$gain_in_air, na.rm = TRUE)
jfk_flights <- sea_flights %>%
filter(origin == "JFK") %>%
summarise(
avg = mean(gain_in_air)
min_j = min(gain_in_air)
max_j = max(gain_in_air)
)
jfk_flights <- sea_flights %>%
filter(origin == "JFK") %>%
summarise(
avg = mean(gain_in_air, na.rm = TRUE)
min_j = min(gain_in_air)
max_j = max(gain_in_air)
)
jfk_flights <- sea_flights %>%
filter(origin == "JFK") %>%
summarise(
avg = mean(gain_in_air, na.rm = TRUE),
min_j = min(gain_in_air),
max_j = max(gain_in_air)
)
View(jfk_flights)
jfk_flights <- sea_flights %>%
filter(origin == "JFK") %>%
summarise(
avg = mean(gain_in_air, na.rm = TRUE),
min_j = min(gain_in_air, na.rm = TRUE),
max_j = max(gain_in_air, na.rm = TRUE)
)
View(jfk_flights)
