# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
View(dimonds)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
View(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
View(diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample)
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price),
color = clarity)
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price),
color = "clarity")
geom_point(mapping = aes(x = carat, y = price, color = clarity)
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue", alpha = 0.3)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price),
color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cur, y = carat, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = carat, size = price, color = price)
)
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(y = price, x = carat, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, color = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, color = cut))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut), alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
clarity_summary <- diamonds %>%
group_by(clarity) %>%
summarize(mean = mean(price), sd = sd(price), se = sd / sqrt(length(price)))
ggplot(data = clarity_summary, mapping = aes(x = clarity, y = mean)) +
geom_bar(mapping = aes(fill = clarity), stat = "identity") +
geom_errorbar(mapping = aes(ymin = (mean - se), ymax = (mean + se)))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity),
position = "dodge")
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(y = price, x = cut, fill = clarity),
position = "fill")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = cut), alpha = 0.3) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut), se = FALSE)
library("maps")
install.packages("maps")
library("maps")
china <- map_data("china")
china <- map_data("China")
usa <- map_data("state")
View(usa)
ggplot(data = usa) +
geom_polygon(mapping = aes(x = long, y = lat, group = group))+
coord_quickmap()
ggplot(data = usa) +
geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = group))+
coord_quickmap()
View(usa)
ggplot(data = diamonds_sample) +
geom_dropbox(mapping = aes(x = color, y = price))
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
ggplot(data = diamonds_sample) +
geom_dropbox(mapping = aes(x = color, y = price))
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))+
scale_color_brewer(palette = "Spectral")
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
bar
# Draw the same chart, but with the coordinate system flipped
bar + coord_flip()
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
bar + coord_polar()
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ color)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Spectral") +
facet_wrap(~ color)
setwd("~/Desktop/INFO201/book-exercises/chapter-16-exercises/exercise-2")
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave("my_plot.png")
